# 1_üìà_An√°lise_Macro.py (Vers√£o 4.1.1 - Final com Corre√ß√£o de Indenta√ß√£o)

import streamlit as st
import pandas as pd
from fredapi import Fred
from bcb import sgs
import plotly.express as px
from datetime import datetime
import yfinance as yf
import numpy as np
import re
import os
import json

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="PAG | An√°lise Macro", page_icon="üåç", layout="wide")

st.sidebar.image("logo.png", use_container_width=True)

# --- NOME DO ARQUIVO DE DADOS ---
DATA_FILE = "recommendations.csv"
RECOMMENDATIONS_FILE = "recommendations.csv"
MANAGER_VIEWS_FILE = "manager_views.json"
REPORTS_DIR = "reports"
FOMC_MEETINGS_FILE = "fomc_meetings.json"
REPORTS_DIR = "reports_fomc" # Diret√≥rio para atas do FOMC

# --- Verifica se o usu√°rio est√° logado ---
if not st.session_state.get("authentication_status"):
    st.info("Por favor, fa√ßa o login para acessar esta p√°gina.")
    st.stop()

# --- CARREGAMENTO DOS DADOS PERSISTENTES ---
if 'big_players_data' not in st.session_state:
    if os.path.exists(DATA_FILE):
        st.session_state.big_players_data = pd.read_csv(DATA_FILE)
    else:
        st.session_state.big_players_data = pd.DataFrame(columns=["Pa√≠s", "Gestora", "Classe de Ativo", "Recomenda√ß√£o", "Data"])

def load_data():
    if os.path.exists(RECOMMENDATIONS_FILE):
        recs = pd.read_csv(RECOMMENDATIONS_FILE)
    else:
        recs = pd.DataFrame(columns=["Gestora", "Classe de Ativo", "Recomenda√ß√£o", "Data"])
    
    if os.path.exists(MANAGER_VIEWS_FILE):
        with open(MANAGER_VIEWS_FILE, 'r', encoding='utf-8') as f:
            views = json.load(f)
    else:
        views = {} # Estrutura padr√£o ser√° criada se o arquivo n√£o existir
    
    return recs, views

recommendations_df, manager_views = load_data()

# --- FUN√á√ïES DE CARREGAMENTO E SALVAMENTO DE DADOS ---
def load_json_data(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return [] # Retorna lista vazia se o arquivo n√£o existir

def save_json_data(data, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# --- CARREGAMENTO INICIAL DOS DADOS DO FOMC ---
if 'fomc_meetings' not in st.session_state:
    st.session_state.fomc_meetings = load_json_data(FOMC_MEETINGS_FILE)

# --- INICIALIZA√á√ÉO DAS APIS ---
@st.cache_resource
def get_fred_api():
    try:
        api_key = st.secrets.get("FRED_API_KEY")
        if not api_key:
            st.error("Chave da API do FRED n√£o configurada."); st.stop()
        return Fred(api_key=api_key)
    except Exception as e:
        st.error(f"Falha ao inicializar API do FRED: {e}"); st.stop()
fred = get_fred_api()

# --- FUN√á√ïES AUXILIARES ---
@st.cache_data(ttl=3600)
# SUBSTITUA A SUA FUN√á√ÉO fetch_fred_series POR ESTA VERS√ÉO DE DIAGN√ìSTICO

@st.cache_data(ttl=3600)
def fetch_fred_series(code, start_date):
    """Busca uma √∫nica s√©rie do FRED de forma robusta."""
    try: return fred.get_series(code, start_date)
    except: return pd.Series(dtype='float64')
        
@st.cache_data(ttl=3600)
def fetch_bcb_series(code, start_date):
    try:
        df = sgs.get({str(code): code}, start=start_date)
        if not df.empty and str(code) in df.columns: return df[str(code)]
        else: return pd.Series(dtype='float64')
    except Exception: return pd.Series(dtype='float64')

@st.cache_data(ttl=86400)
def fetch_market_data(tickers, period="5y"):
    try: return yf.download(tickers, period=period, progress=False)['Close']
    except: return pd.DataFrame()

def plot_indicator(data, title, y_label="Valor"):
    if data is None or data.empty:
        st.warning(f"N√£o foi poss√≠vel carregar os dados para {title}.")
        return
    fig = px.area(data, title=title, labels={"value": y_label, "index": "Data"})
    fig.update_layout(showlegend=False)
    st.plotly_chart(fig, use_container_width=True)

# SUBSTITUA A FUN√á√ÉO ANTIGA POR ESTA VERS√ÉO CORRETA

def plot_indicator_with_analysis(source, code, title, explanation, unit="√çndice", start_date="2005-01-01", is_pct_change=False, hline=None):
    """
    Fun√ß√£o gen√©rica que busca dados do FRED ou BCB e plota com an√°lise.
    """
    if source == 'fred':
        data = fetch_fred_series(code, start_date).dropna()
    elif source == 'bcb':
        data = fetch_bcb_series(code, start_date).dropna()
    else:
        st.error("Fonte de dados desconhecida."); return

    if data.empty: st.warning(f"N√£o foi poss√≠vel carregar os dados para {title}."); return
    
    data_to_plot = data.pct_change(12).dropna() * 100 if is_pct_change else data
    if data_to_plot.empty: st.warning(f"Dados insuficientes para calcular a varia√ß√£o de {title}."); return

    latest_value = data_to_plot.iloc[-1]
    prev_month_value = data_to_plot.iloc[-2] if len(data_to_plot) > 1 else None
    prev_year_value = data_to_plot.iloc[-13] if len(data_to_plot) > 12 else None
    
    col1, col2 = st.columns([3, 1])
    with col1:
        fig = px.area(data_to_plot, title=title)
        fig.update_layout(showlegend=False, yaxis_title=unit, xaxis_title="Data")
        if hline is not None: fig.add_hline(y=hline, line_dash="dash", line_color="red", annotation_text=f"N√≠vel {hline}")
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown(f"**An√°lise do Indicador**"); st.caption(explanation)
        st.metric(label=f"√öltimo Valor ({unit})", value=f"{latest_value:,.2f}")
        is_rate = (unit == "%") or (is_pct_change)
        if prev_month_value is not None:
            change_mom = ((latest_value / prev_month_value) - 1) * 100 if not is_rate and prev_month_value != 0 else latest_value - prev_month_value
            unit_label = "%" if not is_rate else " p.p."
            st.metric(label=f"Varia√ß√£o Mensal", value=f"{change_mom:,.2f}{unit_label}", delta=f"{change_mom:,.2f}")
        if prev_year_value is not None:
            change_yoy = ((latest_value / prev_year_value) - 1) * 100 if not is_rate and prev_year_value != 0 else latest_value - prev_year_value
            unit_label = "%" if not is_rate else " p.p."
            st.metric(label=f"Varia√ß√£o Anual", value=f"{change_yoy:,.2f}{unit_label}", delta=f"{change_yoy:,.2f}")

# SUBSTITUA A SUA FUN√á√ÉO get_us_yield_curve_data PELA VERS√ÉO CORRIGIDA ABAIXO

@st.cache_data(ttl=3600)
def get_us_yield_curve_data():
    """Busca os dados mais recentes para montar a curva de juros dos EUA."""
    maturities_codes = {
        '1 M√™s': 'DGS1MO', 
        '3 Meses': 'DTB3',       # <-- C√ìDIGO CORRIGIDO
        '6 Meses': 'DTB6',       # <-- C√ìDIGO CORRIGIDO
        '1 Ano': 'DGS1', 
        '2 Anos': 'DGS2', 
        '3 Anos': 'DGS3', 
        '5 Anos': 'DGS5', 
        '7 Anos': 'DGS7', 
        '10 Anos': 'DGS10', 
        '20 Anos': 'DGS20', 
        '30 Anos': 'DGS30'
    }
    yield_data = []
    for name, code in maturities_codes.items():
        try:
            # Pega o √∫ltimo valor dispon√≠vel para cada maturidade
            latest_value = fred.get_series_latest_release(code)
            if not latest_value.empty:
                yield_data.append({'Prazo': name, 'Taxa (%)': latest_value.iloc[0]})
        except:
            continue
    
    # Ordena os prazos para o gr√°fico ficar correto
    maturities_order = list(maturities_codes.keys())
    df = pd.DataFrame(yield_data)
    if not df.empty:
        df['Prazo'] = pd.Categorical(df['Prazo'], categories=maturities_order, ordered=True)
        return df.sort_values('Prazo')
    return df

def analyze_central_bank_discourse(text, lang='pt'):
    text = text.lower(); text = re.sub(r'\d+', '', text)
    if lang == 'pt':
        hawkish_words = ['infla√ß√£o','risco','preocupa√ß√£o','desancoragem','expectativas','cautela','perseveran√ßa','serenidade','aperto','restritiva','incerteza','desafios']
        dovish_words = ['crescimento','atividade','hiato','ociosidade','arrefecimento','desacelera√ß√£o','flexibiliza√ß√£o','est√≠mulo','progresso']
    else:
        hawkish_words = ['inflation','risk','tightening','restrictive','concern','hike','vigilance','uncertainty','upside risks']
        dovish_words = ['growth','employment','slack','easing','accommodation','progress','softening','cut','achieved']
    hawkish_score = sum(text.count(word) for word in hawkish_words)
    dovish_score = sum(text.count(word) for word in dovish_words)
    return hawkish_score, dovish_score

def style_recommendation(val):
    colors = {'Overweight': 'rgba(40, 167, 69, 0.7)', 'Underweight': 'rgba(220, 53, 69, 0.7)', 'Neutral': 'rgba(255, 193, 7, 0.7)'}
    return f'background-color: {colors.get(val, "transparent")}; color: white; text-align: center; font-weight: bold;'

# --- UI DA APLICA√á√ÉO ---
st.title("üåç Painel de An√°lise Macroecon√¥mica")
start_date = "2010-01-01"

# --- ABA PRINCIPAL ---
tab_br, tab_us, tab_global = st.tabs(["üáßüá∑ Brasil", "üá∫üá∏ Estados Unidos", "üåê Mercados Globais"])

# --- ABA BRASIL ---
with tab_br:
    st.header("Principais Indicadores do Brasil")
    subtab_br_activity, subtab_br_inflation, subtab_br_bc = st.tabs(["Atividade", "Infla√ß√£o e Juros", "Vis√£o do BCB"])
    
    with subtab_br_activity:
        st.subheader("Indicadores de Atividade Econ√¥mica e Confian√ßa")
        st.divider()

        plot_indicator_with_analysis(
            source='bcb', code=24369, title="IBC-Br (Pr√©via do PIB)",
            explanation="√çndice de Atividade Econ√¥mica do Banco Central, considerado uma 'pr√©via' mensal do PIB. Mede o ritmo da economia como um todo.",
            unit="√çndice"
        )
        st.divider()
        plot_indicator_with_analysis(
            source='bcb', code=21859, title="Produ√ß√£o Industrial (PIM-PF)",
            explanation="Mede a produ√ß√£o f√≠sica da ind√∫stria de transforma√ß√£o e extrativa. Um term√¥metro da sa√∫de do setor secund√°rio.",
            unit="Var. Anual %", is_pct_change=True
        )
        st.divider()
        plot_indicator_with_analysis(
            source='bcb', code=1473, title="Vendas no Varejo (PMC - Volume)",
            explanation="Mede o volume de vendas do com√©rcio varejista. Principal indicador para medir a for√ßa do consumo das fam√≠lias.",
            unit="Var. Anual %", is_pct_change=True
        )
        st.divider()
        plot_indicator_with_analysis(
            source='bcb', code=24424, title="Volume de Servi√ßos (PMS)",
            explanation="Mede a receita bruta real do setor de servi√ßos, que √© o maior componente do PIB brasileiro. Essencial para entender a din√¢mica da economia.",
            unit="Var. Anual %", is_pct_change=True
        )
        st.divider()
        plot_indicator_with_analysis(
            source='bcb', code=4393.3, title="√çndice de Confian√ßa do Consumidor (ICC - FGV)",
            explanation="Mede o qu√£o otimistas os consumidores est√£o em rela√ß√£o √† economia e suas finan√ßas. √â um indicador antecedente do consumo futuro.",
            unit="√çndice"
        )
    
    with subtab_br_inflation:
        st.subheader("Infla√ß√£o e Juros")
        plot_indicator(fetch_bcb_series(13522, start_date), "IPCA (Acum. 12M %)")
    
    with subtab_br_bc:
        st.subheader("Indicadores Monet√°rios (BCB)")
        plot_indicator(fetch_bcb_series(27841, start_date).pct_change(12).dropna()*100, "M2 (Var. Anual %)")
        st.divider()
        st.subheader("An√°lise do Discurso (Ata do Copom)")
        copom_text = st.text_area("Cole aqui o texto da ata do Copom:", height=150, key="copom_text")
        if st.button("Analisar Discurso do Copom"):
            if copom_text.strip():
                h_score, d_score = analyze_central_bank_discourse(copom_text, lang='pt')
                c1,c2,c3 = st.columns(3); c1.metric("Placar Hawkish ü¶Ö",h_score); c2.metric("Placar Dovish üïäÔ∏è",d_score)
                bal = "Hawkish" if h_score > d_score else "Dovish" if d_score > h_score else "Neutro"
                c3.metric("Balan√ßo Final", bal)
    

# --- ABA EUA ---
with tab_us:
    st.header("Principais Indicadores dos Estados Unidos")
    subtab_us_activity, subtab_us_jobs, subtab_us_inflation, subtab_us_yield, subtab_us_real_estate, subtab_us_fed = st.tabs(["Atividade", "Mercado de Trabalho", "Infla√ß√£o", "Curva de Juros", "Mercado Imobili√°rio", "Vis√£o do Fed"])
    
    with subtab_us_activity:
        st.subheader("Indicadores de Atividade, Produ√ß√£o e Consumo")
        st.divider()
        # --- CORRE√á√ÉO: ADICIONADO 'source=fred' ---
        plot_indicator_with_analysis('fred', "INDPRO", "Produ√ß√£o Industrial", "Mede a produ√ß√£o total das f√°bricas, minas e servi√ßos de utilidade p√∫blica.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "RSXFS", "Vendas no Varejo (Ex-Alimenta√ß√£o)", "Mede o total de vendas de bens no varejo. √â um indicador chave da for√ßa do consumo das fam√≠lias.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "PCEC96", "Consumo Pessoal (PCE Real)", "Mede os gastos totais dos consumidores, ajustado pela infla√ß√£o. √â o principal componente do PIB.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "AMTMNO", "Novas Ordens √† Manufatura", "Mede o valor de novos pedidos feitos √† ind√∫stria. √â um indicador antecedente, pois sinaliza a produ√ß√£o futura.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "UMCSENT", "Sentimento do Consumidor (Univ. Michigan)", "Mede a confian√ßa dos consumidores. Um sentimento alto geralmente precede maiores gastos.", "√çndice")


     with subtab_us_jobs:
        st.subheader("Indicadores do Mercado de Trabalho Americano")
        st.divider()
        plot_indicator_with_analysis('fred', "UNRATE", "Taxa de Desemprego", "A porcentagem da for√ßa de trabalho que est√° desempregada, mas procurando por emprego.", "%")
        st.divider()
        plot_indicator_with_analysis('fred', "PAYEMS", "Cria√ß√£o de Vagas (Nonfarm Payrolls)", "Mede o n√∫mero de novos empregos criados a cada m√™s, excluindo o setor agr√≠cola.", "Milhares")
        st.divider()
        plot_indicator_with_analysis('fred', "JTSJOL", "Vagas em Aberto (JOLTS)", "Mede o total de vagas de emprego n√£o preenchidas. Uma propor√ß√£o alta de vagas por desempregado indica um mercado aquecido.", "Milhares")
        st.divider()
        plot_indicator_with_analysis('fred', "CES0500000003", "Crescimento dos Sal√°rios (Average Hourly Earnings)", "Mede a varia√ß√£o anual do sal√°rio m√©dio por hora. √â um indicador crucial para a infla√ß√£o.", "Var. Anual %", is_pct_change=True)
    
    with subtab_us_inflation:
        st.subheader("Indicadores de Infla√ß√£o e Pre√ßos")
        st.caption("A din√¢mica da infla√ß√£o √© o principal fator que guia as decis√µes de juros do Federal Reserve.")
        
        st.markdown("#### Consumer Price Index (CPI) - Infla√ß√£o ao Consumidor")
        col_cpi1, col_cpi2 = st.columns(2)
        with col_cpi1:
            plot_indicator_with_analysis('fred', "CPIAUCSL", "CPI Cheio", "Mede a varia√ß√£o de pre√ßos de uma cesta ampla de bens e servi√ßos, incluindo alimentos e energia.", is_pct_change=True, unit="Var. Anual %")
        with col_cpi2:
            plot_indicator_with_analysis('fred', "CPILFESL", "Core CPI (N√∫cleo)", "Exclui os componentes vol√°teis de alimentos e energia para medir a tend√™ncia de fundo da infla√ß√£o.", is_pct_change=True, unit="Var. Anual %")
        
        st.divider()

        st.markdown("#### Personal Consumption Expenditures (PCE) - A M√©trica do Fed")
        col_pce1, col_pce2 = st.columns(2)
        with col_pce1:
            plot_indicator_with_analysis('fred', "PCEPI", "PCE Cheio", "A medida de infla√ß√£o preferida pelo Fed. Sua cesta √© mais ampla e din√¢mica que a do CPI.", is_pct_change=True, unit="Var. Anual %")
        with col_pce2:
            plot_indicator_with_analysis('fred', "PCEPILFE", "Core PCE (N√∫cleo)", "O indicador mais importante para a pol√≠tica monet√°ria. A meta do Fed √© de 2% para este n√∫cleo.", is_pct_change=True, unit="Var. Anual %")

        st.divider()

        st.markdown("#### Producer Price Index (PPI) & Expectativas")
        col_ppi1, col_ppi2 = st.columns(2)
        with col_ppi1:
            plot_indicator_with_analysis('fred', "PPIACO", "PPI Cheio (Final Demand)", "Mede a infla√ß√£o na porta da f√°brica (pre√ßos no atacado). √â um indicador antecedente para a infla√ß√£o ao consumidor (CPI).", is_pct_change=True, unit="Var. Anual %")
        with col_ppi2:
            plot_indicator_with_analysis('fred', "MICH", "Expectativa de Infla√ß√£o (Michigan, 1 Ano)", "Mede a infla√ß√£o que os consumidores esperam para os pr√≥ximos 12 meses. Importante para o Fed, pois as expectativas podem influenciar a infla√ß√£o futura.", unit="%")

    
   with subtab_us_yield:
        st.subheader("An√°lise da Curva de Juros Americana")
        st.caption("A forma e os spreads da curva de juros s√£o um dos principais indicadores antecedentes da atividade econ√¥mica.")
        st.divider()

        st.markdown("##### Forma da Curva de Juros Atual")
        @st.cache_data(ttl=3600)
        def get_us_yield_curve_data():
            codes = {'1 M√™s':'DGS1MO','3 Meses':'DTB3','6 Meses':'DTB6','1 Ano':'DGS1','2 Anos':'DGS2','5 Anos':'DGS5','10 Anos':'DGS10','30 Anos':'DGS30'}
            data = []
            for name, code in codes.items():
                try:
                    val = fetch_fred_series(code, datetime.now() - pd.Timedelta(days=10)) # Busca dados recentes
                    if not val.empty: data.append({'Prazo': name, 'Taxa (%)': val.iloc[-1]})
                except: continue
            df = pd.DataFrame(data)
            if not df.empty: df['Prazo'] = pd.Categorical(df['Prazo'], categories=codes.keys(), ordered=True); return df.sort_values('Prazo')
            return df
        
        yield_curve_df = get_us_yield_curve_data()
        if not yield_curve_df.empty:
            fig_curve = px.line(yield_curve_df, x='Prazo', y='Taxa (%)', title="Curva de Juros do Tesouro Americano", markers=True)
            st.plotly_chart(fig_curve, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel carregar os dados para a forma da curva de juros.")
        
        st.divider()
        st.markdown("##### Spreads da Curva de Juros (Indicadores de Recess√£o)")
        col1, col2 = st.columns(2)
        with col1:
            j10a = fetch_fred_series("DGS10", start_date); j2a = fetch_fred_series("DGS2", start_date)
            if not j10a.empty and not j2a.empty:
                spread = (j10a - j2a).dropna()
                fig = px.area(spread, title="Spread 10 Anos - 2 Anos"); fig.add_hline(y=0, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
                st.caption("A invers√£o deste spread (abaixo de zero) historicamente antecede recess√µes.")
        with col2:
            j2a_s = fetch_fred_series("DGS2", start_date); j3m = fetch_fred_series("DGS3MO", start_date)
            if not j2a_s.empty and not j3m.empty:
                spread = (j2a_s - j3m).dropna()
                fig = px.area(spread, title="Spread 2 Anos - 3 Meses"); fig.add_hline(y=0, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
                st.caption("Considerado pelo Fed um indicador de recess√£o de curto prazo muito confi√°vel.")

    
    with subtab_us_real_estate:
        st.subheader("Indicadores do Mercado Imobili√°rio Americano")
        st.caption("O setor imobili√°rio √© um dos principais motores do ciclo econ√¥mico dos EUA.")
        st.divider()

        plot_indicator_with_analysis('fred', 
            "MORTGAGE30US", "Taxa de Financiamento Imobili√°rio 30 Anos",
            "Mede o custo do cr√©dito para compra de im√≥veis. Taxas mais altas desestimulam a demanda.",
            unit="%"
        )
        st.divider()
        plot_indicator_with_analysis('fred', 
            "CSUSHPISA", "√çndice de Pre√ßos de Im√≥veis (Case-Shiller)",
            "Principal √≠ndice de pre√ßos de im√≥veis residenciais. Mostra a valoriza√ß√£o das casas.",
            unit="√çndice"
        )
        st.divider()
        plot_indicator_with_analysis('fred', 
            "PERMIT", "Permiss√µes de Constru√ß√£o",
            "Indicador antecedente da atividade de constru√ß√£o. Um aumento nas permiss√µes sinaliza aquecimento do setor.",
            unit="Milhares"
        )
        st.divider()
        plot_indicator_with_analysis('fred', 
            "HSN1F", "Casas Novas Vendidas",
            "Mede a for√ßa da demanda por novas propriedades. Um aumento nas vendas indica um mercado aquecido.",
            unit="Milhares"
        )

    with subtab_us_fed:
        st.subheader("Painel de Pol√≠tica Monet√°ria - Federal Reserve (Fed)")
        st.caption("Acompanhe as ferramentas e os indicadores que guiam as decis√µes do banco central americano.")
        st.divider()

        st.markdown("##### Pol√≠tica de Juros e Balan√ßo do Fed")
        col1, col2 = st.columns(2)
        with col1:
            plot_indicator_with_analysis('fred', "FEDFUNDS", "Fed Funds Rate", "A principal taxa de juros de pol√≠tica monet√°ria, definida pelo FOMC.", unit="%")
        with col2:
            plot_indicator_with_analysis('fred', "WALCL", "Ativos Totais no Balan√ßo do Fed", "Aumentos (QE) indicam pol√≠tica expansionista; redu√ß√µes (QT) indicam pol√≠tica contracionista.", unit="$ Trilh√µes")

        st.divider()
        st.markdown("##### Agregados Monet√°rios e Contexto Fiscal")
        col3, col4 = st.columns(2)
        with col3:
            plot_indicator_with_analysis('fred', "M2SL", "Agregado Monet√°rio M2", "Mede a quantidade de 'dinheiro' na economia. Sua varia√ß√£o pode ser um indicador antecedente de infla√ß√£o.", "Var. Anual %", is_pct_change=True)
        with col4:
            debt = fetch_fred_series("GFDEBTN", start_date); gdp = fetch_fred_series("GDP", start_date)
            if not debt.empty and not gdp.empty:
                gdp = gdp.resample('D').ffill()
                debt_to_gdp = (debt / (gdp * 1_000_000_000)).dropna() * 100
                fig_debt = px.area(debt_to_gdp, title="D√≠vida P√∫blica / PIB (%)"); fig_debt.update_layout(showlegend=False, yaxis_title="%"); st.plotly_chart(fig_debt, use_container_width=True)

        st.divider()
        st.subheader("Acompanhamento Hist√≥rico do Discurso do FOMC")
        # (O c√≥digo do hist√≥rico do FOMC permanece o mesmo aqui)
        
        meetings = st.session_state.fomc_meetings
        if not meetings:
            st.info("Nenhum registro de reuni√£o do FOMC foi adicionado ainda.")
        else:
            sorted_meetings = sorted(meetings, key=lambda x: x['meeting_date'], reverse=True)
            meeting_dates = [m['meeting_date'] for m in sorted_meetings]
            selected_date = st.selectbox("Selecione a data da Reuni√£o do FOMC para analisar:", meeting_dates)
            
            selected_meeting = next((m for m in sorted_meetings if m['meeting_date'] == selected_date), None)
            
            if selected_meeting:
                st.metric("Decis√£o de Juros Tomada", selected_meeting.get("decision", "N/A"))
                h_score = selected_meeting["analysis"]["hawkish"]
                d_score = selected_meeting["analysis"]["dovish"]
                final_tone = "Hawkish ü¶Ö" if h_score > d_score else "Dovish üïäÔ∏è" if d_score > h_score else "Neutro üòê"
                
                c1, c2, c3 = st.columns(3)
                c1.metric("Placar Hawkish", h_score); c2.metric("Placar Dovish", d_score); c3.metric("Tom Predominante", final_tone)
                
                if selected_meeting.get("pdf_path") and os.path.exists(selected_meeting["pdf_path"]):
                    with open(selected_meeting["pdf_path"], "rb") as pdf_file:
                        st.download_button("Baixar Ata em PDF", data=pdf_file, file_name=os.path.basename(selected_meeting["pdf_path"]))
                
                with st.expander("Ver texto completo da ata"):
                    st.text(selected_meeting.get("minutes_text", "Texto n√£o dispon√≠vel."))

        # --- MODO EDITOR ---
        if st.session_state.get("role") == "Analista":
            st.divider()
            st.markdown("---")
            st.header("üìù Modo Editor - Reuni√µes do FOMC")
            
            editor_tab1, editor_tab2 = st.tabs(["Adicionar Nova Reuni√£o", "Gerenciar Reuni√µes Existentes"])
            
            with editor_tab1:
                with st.form("new_meeting_form"):
                    st.markdown("##### Adicionar Registro de Nova Reuni√£o")
                    m_date = st.date_input("Data da Reuni√£o"); m_decision = st.text_input("Decis√£o de Juros (ex: Manteve em 5.25%-5.50%)")
                    m_text = st.text_area("Cole aqui o texto completo da ata:", height=250); m_pdf = st.file_uploader("Anexar arquivo da ata em PDF")
                    
                    if st.form_submit_button("Salvar Nova Reuni√£o"):
                        if m_text and m_decision:
                            h, d = analyze_central_bank_discourse(m_text, lang='en')
                            new_meeting = {"meeting_date": m_date.strftime("%Y-%m-%d"), "decision": m_decision, "minutes_text": m_text, "pdf_path": "", "analysis": {"hawkish": h, "dovish": d}}
                            if m_pdf:
                                if not os.path.exists(REPORTS_DIR_FOMC): os.makedirs(REPORTS_DIR_FOMC)
                                file_path = os.path.join(REPORTS_DIR_FOMC, m_pdf.name)
                                with open(file_path, "wb") as f: f.write(m_pdf.getbuffer())
                                new_meeting["pdf_path"] = file_path
                            
                            st.session_state.fomc_meetings.append(new_meeting)
                            save_json_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
                            st.success("Nova reuni√£o salva com sucesso!"); st.rerun()
                        else:
                            st.error("Data, Decis√£o e Texto da Ata s√£o campos obrigat√≥rios.")

            with editor_tab2:
                st.markdown("##### Excluir um Registro de Reuni√£o")
                if not st.session_state.fomc_meetings:
                    st.info("Nenhuma reuni√£o para gerenciar.")
                else:
                    sorted_meetings_delete = sorted(st.session_state.fomc_meetings, key=lambda x: x['meeting_date'], reverse=True)
                    for i, meeting in enumerate(sorted_meetings_delete):
                        st.markdown(f"**Reuni√£o de {meeting['meeting_date']}**")
                        if st.button("Excluir este registro", key=f"delete_{meeting['meeting_date']}"):
                            st.session_state.fomc_meetings = [m for m in st.session_state.fomc_meetings if m['meeting_date'] != meeting['meeting_date']]
                            save_json_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
                            st.success("Registro exclu√≠do!"); st.rerun()
                        st.divider()


# --- ABA MERCADOS GLOBAIS ---
with tab_global:
    st.header("√çndices e Indicadores de Mercado Global")
    subtab_equity, subtab_commodities, subtab_risk, subtab_valuation, subtab_big_players = st.tabs(["A√ß√µes", "Commodities", "Risco", "Valuation", "Vis√£o dos Big Players"])
    with subtab_equity:
        tickers = {"S&P 500": "^GSPC", "Ibovespa": "^BVSP", "Nasdaq": "^IXIC", "DAX": "^GDAXI"}
        sel = st.multiselect("Selecione os √≠ndices:", options=list(tickers.keys()), default=["S&P 500", "Ibovespa"])
        if sel:
            data = fetch_market_data([tickers[i] for i in sel])
            if not data.empty: st.plotly_chart(px.line((data / data.dropna().iloc[0]) * 100, title="Performance Normalizada (Base 100)"), use_container_width=True)
    with subtab_commodities:
        c1,c2 = st.columns(2)
        comm_tickers = {"Petr√≥leo WTI": "CL=F", "Ouro": "GC=F"}; data = fetch_market_data(list(comm_tickers.values()))
        if not data.empty: data.rename(columns=lambda c: next(k for k,v in comm_tickers.items() if v==c), inplace=True); c1.plotly_chart(px.line(data, title="Commodities"), use_container_width=True)
        curr_tickers = {"D√≥lar/Real": "BRL=X", "Euro/D√≥lar": "EURUSD=X"}; data=fetch_market_data(list(curr_tickers.values()))
        if not data.empty: data.rename(columns=lambda c: next(k for k,v in curr_tickers.items() if v==c), inplace=True); c2.plotly_chart(px.line(data, title="C√¢mbio"), use_container_width=True)
    with subtab_risk:
        vix = fetch_market_data(["^VIX"])
        if not vix.empty:
            fig = px.area(vix, title="√çndice de Volatilidade VIX"); fig.add_hline(y=20, line_dash="dash"); fig.add_hline(y=30, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
    with subtab_valuation:
        factor_tickers = {"Growth": "VUG", "Value": "VTV"}
        data = fetch_market_data(list(factor_tickers.values()))
        if not data.empty:
            data["Ratio"] = data["VUG"] / data["VTV"]
            st.plotly_chart(px.line(data["Ratio"], title="Ratio de Performance: Growth vs. Value"), use_container_width=True)
    with subtab_big_players:
        st.subheader("Vis√£o Consolidada dos Grandes Players")

        # --- VISUALIZA√á√ÉO P√öBLICA ---
        st.markdown("##### Matriz de Recomenda√ß√µes T√°ticas")
        if recommendations_df.empty:
            st.info("Nenhuma recomenda√ß√£o t√°tica adicionada.")
        else:
            latest_recs = recommendations_df.sort_values('Data', ascending=False).drop_duplicates(['Gestora', 'Classe de Ativo'])
            pivot_table = latest_recs.pivot_table(index='Classe de Ativo', columns='Gestora', values='Recomenda√ß√£o', aggfunc='first').fillna("-")
            st.dataframe(pivot_table.style.applymap(style_recommendation), use_container_width=True)
        
        st.divider()
        st.markdown("##### An√°lise Detalhada por Gestora")
        
        # Gestoras a serem exibidas
        managers_to_display = ["BlackRock", "JP Morgan", "XP", "BTG"]
        for manager in managers_to_display:
            with st.expander(f"Vis√£o da {manager}"):
                view_data = manager_views.get(manager, {"summary": "Dados n√£o dispon√≠veis.", "report_file": ""})
                st.markdown(view_data["summary"])
                if view_data.get("report_file") and os.path.exists(view_data["report_file"]):
                    with open(view_data["report_file"], "rb") as pdf_file:
                        st.download_button(label="Baixar Relat√≥rio Completo", data=pdf_file, file_name=os.path.basename(view_data["report_file"]), mime='application/octet-stream')
        
        st.divider()
        st.markdown("##### Consolida√ß√£o Highpar")
        st.info(manager_views.get("Highpar", {"summary": "Vis√£o da casa ainda n√£o definida."})["summary"])

        # --- MODO EDITOR ---
        if st.session_state.get("role") == "Analista":
            st.divider()
            st.markdown("---")
            st.header("üìù Modo Editor")

            # Editor da Matriz de Recomenda√ß√µes
            with st.form("matrix_editor_form"):
                st.markdown("##### Editar Matriz de Recomenda√ß√µes")
                c1,c2,c3 = st.columns(3)
                gestora = c1.selectbox("Gestora (Matriz)", managers_to_display)
                classe_ativo = c2.selectbox("Classe de Ativo (Matriz)", ["A√ß√µes Brasil", "A√ß√µes EUA", "Renda Fixa Pr√©", "Infla√ß√£o", "D√≥lar", "Commodities"])
                recomendacao = c3.radio("Recomenda√ß√£o", ["Overweight", "Neutral", "Underweight"], horizontal=True)
                if st.form_submit_button("Salvar na Matriz"):
                    new_rec = pd.DataFrame([{"Gestora": gestora, "Classe de Ativo": classe_ativo, "Recomenda√ß√£o": recomendacao, "Data": datetime.now().strftime("%Y-%m-%d")}])
                    updated_recs = pd.concat([recommendations_df, new_rec], ignore_index=True)
                    updated_recs.to_csv(RECOMMENDATIONS_FILE, index=False)
                    st.success("Matriz de recomenda√ß√µes atualizada!"); st.rerun()

            # Editor dos Detalhes das Gestoras
            with st.form("details_editor_form"):
                st.markdown("##### Editar An√°lise Detalhada da Gestora")
                manager_to_edit = st.selectbox("Selecione a Gestora para Editar", managers_to_display + ["Highpar"])
                
                current_summary = manager_views.get(manager_to_edit, {}).get("summary", "")
                new_summary = st.text_area("Texto da An√°lise", value=current_summary, height=250)
                
                uploaded_file = st.file_uploader("Subir novo relat√≥rio em PDF (opcional)")

                if st.form_submit_button("Salvar An√°lise Detalhada"):
                    if uploaded_file is not None:
                        # Cria o diret√≥rio se n√£o existir
                        if not os.path.exists(REPORTS_DIR):
                            os.makedirs(REPORTS_DIR)
                        # Salva o arquivo e guarda o caminho
                        file_path = os.path.join(REPORTS_DIR, uploaded_file.name)
                        with open(file_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        manager_views[manager_to_edit]["report_file"] = file_path
                    
                    manager_views[manager_to_edit]["summary"] = new_summary
                    manager_views[manager_to_edit]["last_updated"] = datetime.now().strftime("%Y-%m-%d")

                    with open(MANAGER_VIEWS_FILE, 'w', encoding='utf-8') as f:
                        json.dump(manager_views, f, ensure_ascii=False, indent=4)
                    
                    st.success(f"An√°lise da {manager_to_edit} atualizada!"); st.rerun()
