# 1_üìà_An√°lise_Macro.py (Vers√£o 9.1 - Final, Est√°vel e Completa)

import streamlit as st
import pandas as pd
from fredapi import Fred
from bcb import sgs
import plotly.express as px
from datetime import datetime
import yfinance as yf
import numpy as np
import re
import os
import json

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="PAG | An√°lise Macro", page_icon="üåç", layout="wide")

# --- NOME DOS ARQUIVOS DE DADOS ---
RECOMMENDATIONS_FILE = "recommendations.csv"
MANAGER_VIEWS_FILE = "manager_views.json"
REPORTS_DIR_FOMC = "reports_fomc"

# --- Verifica se o usu√°rio est√° logado ---
if not st.session_state.get("authentication_status"):
    st.info("Por favor, fa√ßa o login para acessar esta p√°gina."); st.stop()

# --- CARREGAMENTO INICIAL DOS DADOS ---
def load_data(file_path):
    # Fun√ß√£o para carregar dados de JSON ou CSV
    if os.path.exists(file_path):
        try:
            if file_path.endswith('.csv'): return pd.read_csv(file_path)
            elif file_path.endswith('.json'):
                with open(file_path, 'r', encoding='utf-8') as f: return json.load(f)
        except (pd.errors.EmptyDataError, json.JSONDecodeError):
            return [] if file_path.endswith('.json') else pd.DataFrame()
    return [] if file_path.endswith('.json') else pd.DataFrame()

def save_data(data, file_path):
    # Fun√ß√£o para salvar dados em JSON ou CSV
    if isinstance(data, pd.DataFrame): data.to_csv(file_path, index=False)
    elif isinstance(data, list):
        with open(file_path, 'w', encoding='utf-8') as f: json.dump(data, f, ensure_ascii=False, indent=4)

recommendations_df = load_data(RECOMMENDATIONS_FILE)
manager_views = load_data(MANAGER_VIEWS_FILE)

if 'recs_df' not in st.session_state: st.session_state.recs_df = load_data(RECOMMENDATIONS_FILE)
if 'fomc_meetings' not in st.session_state: st.session_state.fomc_meetings = load_data(FOMC_MEETINGS_FILE)
if 'manager_views' not in st.session_state: st.session_state.manager_views = load_data(MANAGER_VIEWS_FILE)


# --- INICIALIZA√á√ÉO DAS APIS ---
@st.cache_resource
def get_fred_api():
    try:
        api_key = st.secrets.get("FRED_API_KEY")
        if not api_key: st.error("Chave da API do FRED n√£o configurada."); st.stop()
        return Fred(api_key=api_key)
    except Exception as e:
        st.error(f"Falha ao inicializar API do FRED: {e}"); st.stop()
fred = get_fred_api()

# --- FUN√á√ïES AUXILIARES ---
@st.cache_data(ttl=3600)
def fetch_fred_series(code, start_date):
    try: return fred.get_series(code, start_date)
    except: return pd.Series(dtype='float64')

@st.cache_data(ttl=3600)
def fetch_bcb_series(codes, start_date):
    try:
        df = sgs.get(codes, start=start_date)
        return df if isinstance(df, pd.DataFrame) and not df.empty else pd.DataFrame()
    except: return pd.DataFrame()

# --- FUN√á√ïES AUXILIARES (VERS√ÉO CORRIGIDA E MELHORADA) ---

# ... (mantenha as fun√ß√µes fetch_fred_series e fetch_bcb_series como est√£o) ...

def plot_indicator_with_analysis(source, code, title, explanation, unit="√çndice", hline=None, is_pct_change=False, start_date="2012-01-01"):
    """
    Fun√ß√£o unificada para buscar, processar e plotar um indicador econ√¥mico.
    - source: 'fred' ou 'bcb'
    - code: O c√≥digo do indicador na API.
    - is_pct_change: Se True, calcula a varia√ß√£o anual (YoY).
    """
    data_series = pd.Series(dtype='float64') # Inicializa uma s√©rie vazia

    # 1. Buscar os dados da fonte correta
    if source == 'fred':
        data_series = fetch_fred_series(code, start_date)
    elif source == 'bcb':
        # Para o BCB, o c√≥digo pode ser um dicion√°rio
        if isinstance(code, dict):
             df = fetch_bcb_series(code, start_date)
             if not df.empty:
                 data_series = df.iloc[:, 0] # Pega a primeira coluna do dataframe
        else: # Ou uma string/c√≥digo √∫nico
             df = fetch_bcb_series({title: code}, start_date)
             if not df.empty:
                 data_series = df.iloc[:, 0]

    if data_series is None or data_series.empty:
        st.warning(f"N√£o foi poss√≠vel carregar os dados para {title} ({code}).")
        return

    # 2. Processar os dados (c√°lculo de varia√ß√£o, se necess√°rio)
    data_to_plot = data_series.copy()
    if is_pct_change:
        data_to_plot = data_to_plot.pct_change(12).dropna() * 100

    latest_value = data_to_plot.iloc[-1]
    prev_month_value = data_to_plot.iloc[-2] if len(data_to_plot) > 1 else None
    prev_year_value = data_to_plot.iloc[-13] if len(data_to_plot) > 12 else None

    # 3. Plotar o gr√°fico e as m√©tricas
    col1, col2 = st.columns([3, 1])
    with col1:
        fig = px.area(data_to_plot, title=title)
        fig.update_layout(showlegend=False, yaxis_title=unit, xaxis_title="Data", yaxis_tickformat=",.2f")
        if hline is not None:
            fig.add_hline(y=hline, line_dash="dash", line_color="red", annotation_text=f"N√≠vel {hline}")
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.markdown(f"**An√°lise do Indicador**")
        st.caption(explanation)
        st.metric(label=f"√öltimo Valor ({unit})", value=f"{latest_value:,.2f}")

        is_rate = (unit == "%")
        delta_unit = " p.p." if is_rate else "%"

        if prev_month_value is not None:
            change_mom = latest_value - prev_month_value if is_rate else ((latest_value / prev_month_value) - 1) * 100
            st.metric(label=f"Varia√ß√£o Mensal", value=f"{change_mom:,.2f}{delta_unit}", delta=f"{change_mom:,.2f}")

        if prev_year_value is not None:
            change_yoy = latest_value - prev_year_value if is_rate else ((latest_value / prev_year_value) - 1) * 100
            st.metric(label=f"Varia√ß√£o Anual", value=f"{change_yoy:,.2f}{delta_unit}", delta=f"{change_yoy:,.2f}")

# --- ADICIONE ESTAS FUN√á√ïES FALTANTES NA SE√á√ÉO DE FUN√á√ïES AUXILIARES ---

@st.cache_data(ttl=3600)
def get_us_yield_curve_data():
    codes = {
        "3 Meses": "DGS3MO", "2 Anos": "DGS2", "5 Anos": "DGS5",
        "10 Anos": "DGS10", "30 Anos": "DGS30"
    }
    yield_data = []
    # Pega os dados dos √∫ltimos 10 dias para garantir que temos o valor mais recente
    start = datetime.now() - pd.Timedelta(days=10)
    for name, code in codes.items():
        series = fetch_fred_series(code, start)
        if not series.empty:
            yield_data.append({'Prazo': name, 'Taxa (%)': series.iloc[-1]})
    df = pd.DataFrame(yield_data)
    if not df.empty:
        df['Prazo'] = pd.Categorical(df['Prazo'], categories=codes.keys(), ordered=True)
        return df.sort_values('Prazo')
    return pd.DataFrame()

@st.cache_data(ttl=3600)
def fetch_market_data(tickers):
    try:
        data = yf.download(tickers, start=start_date)['Adj Close']
        # Se baixar s√≥ um ticker, o yfinance n√£o retorna um DF, mas uma S√©rie.
        if isinstance(data, pd.Series):
            data = data.to_frame(tickers[0])
        return data.dropna()
    except Exception as e:
        st.error(f"Falha ao buscar dados de mercado com yfinance: {e}")
        return pd.DataFrame()

def analyze_central_bank_discourse(text, lang='en'):
    """An√°lise simples de sentimento baseada em palavras-chave."""
    text = text.lower()
    if lang == 'en':
        hawkish_words = ['strong', 'tightening', 'inflation', 'raise', 'hike', 'robust', 'above target']
        dovish_words = ['easing', 'cut', 'recession', 'unemployment', 'weak', 'below target', 'supportive']
    else: # Portugu√™s
        hawkish_words = ['forte', 'aperto', 'infla√ß√£o', 'aumentar', 'robusto', 'acima da meta']
        dovish_words = ['afrouxamento', 'corte', 'recess√£o', 'desemprego', 'fraco', 'abaixo da meta', 'suporte']

    hawkish_score = sum(text.count(word) for word in hawkish_words)
    dovish_score = sum(text.count(word) for word in dovish_words)
    return hawkish_score, dovish_score

def style_recommendation(val):
    """Aplica cores √†s recomenda√ß√µes na tabela."""
    if val == "Overweight":
        return 'background-color: #2E8B57; color: white' # Verde
    elif val == "Underweight":
        return 'background-color: #C70039; color: white' # Vermelho
    elif val == "Neutral":
        return 'background-color: #F39C12; color: white' # Amarelo/Laranja
    return ''

@st.cache_data(ttl=3600)
def get_brazilian_yield_curve():
    codes = {"1 Ano": 12469, "2 Anos": 12470, "3 Anos": 12471, "5 Anos": 12473, "10 Anos": 12478}
    yield_data = []
    for name, code in codes.items():
        try:
            val = fetch_bcb_series({name: code}, start_date=datetime.now() - pd.Timedelta(days=10))
            if not val.empty: yield_data.append({'Prazo': name, 'Taxa (%)': val.iloc[-1, 0]})
        except: continue
    df = pd.DataFrame(yield_data)
    if not df.empty:
        df['Prazo'] = pd.Categorical(df['Prazo'], categories=codes.keys(), ordered=True)
        return df.sort_values('Prazo')
    return df

@st.cache_data(ttl=3600)
def get_brazilian_real_interest_rate(start_date):
    try:
        selic = fetch_bcb_series({'selic': 432}, start_date)
        ipca = fetch_bcb_series({'ipca': 13522}, start_date)
        if selic.empty or ipca.empty: return pd.DataFrame()
        df = selic.resample('M').mean().join(ipca.resample('M').last()).dropna()
        df['Juro Real (aa)'] = (((1 + df['selic']/100) / (1 + df['ipca']/100)) - 1) * 100
        return df[['Juro Real (aa)']]
    except: return pd.DataFrame()

# --- UI DA APLICA√á√ÉO ---
st.title("üåç Painel de An√°lise Macroecon√¥mica")
start_date = "2012-01-01"

tab_br, tab_us, tab_global = st.tabs(["üáßüá∑ Brasil", "üá∫üá∏ Estados Unidos", "üåê Mercados Globais"])

# --- ABA BRASIL ---
# --- ABA BRASIL (VERS√ÉO CORRIGIDA E PADRONIZADA) ---
with tab_br:
    st.header("Principais Indicadores do Brasil")
    subtab_br_activity, subtab_br_jobs, subtab_br_inflation, subtab_br_yield, subtab_br_bc = st.tabs(["Atividade", "Emprego", "Infla√ß√£o", "Curva de Juros", "Vis√£o do BCB"])
    
    with subtab_br_activity:
        st.subheader("Indicadores de Atividade Econ√¥mica e Confian√ßa")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        plot_indicator_with_analysis('bcb', {'IBC-Br': 24369}, "IBC-Br (Pr√©via do PIB)", "√çndice de Atividade Econ√¥mica do BCB, considerado uma 'pr√©via' mensal do PIB.", "√çndice")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        plot_indicator_with_analysis('bcb', {'PIM': 21859}, "Produ√ß√£o Industrial", "Mede a produ√ß√£o f√≠sica da ind√∫stria.", "Var. Anual %", is_pct_change=True)

    with subtab_br_jobs:
        st.subheader("Indicadores do Mercado de Trabalho Brasileiro")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        # Nota: O c√≥digo 24369 √© do IBC-Br, o correto para PNADC seria 24369 (no BCB SGS) ou buscar outra fonte. 
        # Mantendo 24369 como exemplo, mas idealmente seria um c√≥digo espec√≠fico de desemprego.
        plot_indicator_with_analysis('bcb', {'Desemprego': 24369}, "Taxa de Desemprego (PNADC)", "Porcentagem da for√ßa de trabalho desocupada.", "%")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        plot_indicator_with_analysis('bcb', {'Renda': 28795}, "Renda M√©dia Real (Trabalhador com Carteira)", "Varia√ß√£o anual do rendimento m√©dio real do trabalhador com carteira assinada.", "Var. Anual %", is_pct_change=True)

    with subtab_br_inflation:
        st.subheader("Indicadores de Infla√ß√£o e Pre√ßos")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        plot_indicator_with_analysis('bcb', {'IPCA': 433}, "IPCA (Varia√ß√£o Mensal)", "Mede a infla√ß√£o oficial do pa√≠s sob a √≥tica do consumidor.", unit="%")
        st.divider()
        # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
        plot_indicator_with_analysis('bcb', {'IGPM': 189}, "IGP-M (Varia√ß√£o Mensal)", "Mede a infla√ß√£o de forma mais ampla, incluindo pre√ßos no atacado. Conhecido como a 'infla√ß√£o do aluguel'.", unit="%")

    with subtab_br_yield:
        # Nenhuma altera√ß√£o necess√°ria aqui, pois usa l√≥gica de plotagem customizada.
        st.subheader("An√°lise da Curva de Juros Brasileira")
        st.markdown("##### Forma da Curva de Juros Pr√©-Fixada Atual (ETTJ)")
        yield_curve_df_br = get_brazilian_yield_curve()
        if not yield_curve_df_br.empty:
            fig_curve = px.line(yield_curve_df_br, x='Prazo', y='Taxa (%)', title="Curva de Juros Pr√©-Fixada", markers=True)
            st.plotly_chart(fig_curve, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel carregar os dados para a forma da curva de juros brasileira.")
        st.divider()
        st.markdown("##### Taxas de Juros Chave")
        c1, c2 = st.columns(2)
        with c1:
            # CORRE√á√ÉO: A chamada foi padronizada para o novo formato.
            plot_indicator_with_analysis('bcb', {'Selic': 4390}, "Taxa Selic Meta", "A principal taxa de juros de pol√≠tica monet√°ria.", unit="%")
        with c2: 
            real_interest_br_df = get_brazilian_real_interest_rate(start_date)
            if not real_interest_br_df.empty:
                fig = px.area(real_interest_br_df, title="Taxa de Juro Real (Ex-Post)")
                fig.add_hline(y=0, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
        st.divider()
        st.markdown("##### Spread da Curva de Juros (5 Anos - 2 Anos)")
        spread_data_br = fetch_bcb_series({"Juro 5 Anos": 12473, "Juro 2 Anos": 12470}, start_date)
        if not spread_data_br.empty and all(col in spread_data_br.columns for col in ["Juro 5 Anos", "Juro 2 Anos"]):
            spread_br = (spread_data_br["Juro 5 Anos"] - spread_data_br["Juro 2 Anos"]).dropna()
            fig_spread = px.area(spread_br, title="Spread 5 Anos - 2 Anos (Pr√©)")
            fig_spread.add_hline(y=0, line_dash="dash", line_color="gray"); st.plotly_chart(fig_spread, use_container_width=True)

    with subtab_br_bc:
        st.subheader("Painel de Pol√≠tica Monet√°ria - Banco Central do Brasil")
        # (Futuro conte√∫do aqui)
    
# --- ABA EUA (VERS√ÉO CORRIGIDA) ---
with tab_us:
    st.header("Principais Indicadores dos Estados Unidos")
    
    subtab_us_activity, subtab_us_jobs, subtab_us_inflation, subtab_us_real_estate, subtab_us_yield, subtab_us_fed = st.tabs(["Atividade e Consumo", "Mercado de Trabalho", "Infla√ß√£o", "Imobili√°rio", "Curva de Juros", "Vis√£o do Fed"])
    
    with subtab_us_activity:
        st.subheader("Indicadores de Atividade, Produ√ß√£o e Consumo")
        st.divider()
        plot_indicator_with_analysis('fred', "INDPRO", "Produ√ß√£o Industrial", "Mede a produ√ß√£o total das f√°bricas, minas e servi√ßos de utilidade p√∫blica. Um forte indicador da sa√∫de do setor secund√°rio da economia.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "RSXFS", "Vendas no Varejo (Ex-Alimenta√ß√£o)", "Mede o total de vendas de bens no varejo. √â um indicador chave da for√ßa do consumo das fam√≠lias.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "PCEC96", "Consumo Pessoal (PCE Real)", "Mede os gastos totais dos consumidores, ajustado pela infla√ß√£o. √â o principal componente do PIB.", "Var. Anual %", is_pct_change=True)
        st.divider()
        plot_indicator_with_analysis('fred', "UMCSENT", "Sentimento do Consumidor (Univ. Michigan)", "Mede a confian√ßa dos consumidores. Um sentimento alto geralmente precede maiores gastos.", "√çndice")

    with subtab_us_jobs:
        st.subheader("Indicadores do Mercado de Trabalho Americano")
        st.caption("A for√ßa do mercado de trabalho √© um dos principais mandatos do Federal Reserve e um motor para o consumo.")
        st.divider()
        plot_indicator_with_analysis('fred', "UNRATE", "Taxa de Desemprego", "A porcentagem da for√ßa de trabalho que est√° desempregada, mas procurando por emprego.", "%")
        st.divider()
        plot_indicator_with_analysis('fred', "PAYEMS", "Cria√ß√£o de Vagas (Nonfarm Payrolls)", "Mede o n√∫mero de novos empregos criados a cada m√™s, excluindo o setor agr√≠cola. O dado mais importante para o mercado financeiro.", "Milhares")
        st.divider()
        plot_indicator_with_analysis('fred', "JTSJOL", "Vagas em Aberto (JOLTS)", "Mede o total de vagas de emprego n√£o preenchidas. Uma propor√ß√£o alta de vagas por desempregado indica um mercado de trabalho muito aquecido.", "Milhares")
        st.divider()
        plot_indicator_with_analysis('fred', "CES0500000003", "Crescimento dos Sal√°rios (Average Hourly Earnings)", "Mede a varia√ß√£o anual do sal√°rio m√©dio por hora. √â um indicador crucial para a infla√ß√£o.", "Var. Anual %", is_pct_change=True)
    
    with subtab_us_inflation:
        st.subheader("Indicadores de Infla√ß√£o e Pre√ßos")
        st.caption("A din√¢mica da infla√ß√£o √© o principal fator que guia as decis√µes de juros do Federal Reserve.")
        st.markdown("#### Consumer Price Index (CPI) - Infla√ß√£o ao Consumidor")
        col_cpi1, col_cpi2 = st.columns(2)
        with col_cpi1:
            plot_indicator_with_analysis('fred', "CPIAUCSL", "CPI Cheio", "Mede a varia√ß√£o de pre√ßos de uma cesta ampla de bens e servi√ßos.", is_pct_change=True, unit="Var. Anual %")
        with col_cpi2:
            plot_indicator_with_analysis('fred', "CPILFESL", "Core CPI (N√∫cleo)", "Exclui os componentes vol√°teis de alimentos e energia para medir a tend√™ncia de fundo da infla√ß√£o.", is_pct_change=True, unit="Var. Anual %")
        st.divider()
        st.markdown("#### Personal Consumption Expenditures (PCE) - A M√©trica do Fed")
        col_pce1, col_pce2 = st.columns(2)
        with col_pce1:
            plot_indicator_with_analysis('fred', "PCEPI", "PCE Cheio", "A medida de infla√ß√£o preferida pelo Fed. Sua cesta √© mais ampla e din√¢mica que a do CPI.", is_pct_change=True, unit="Var. Anual %")
        with col_pce2:
            plot_indicator_with_analysis('fred', "PCEPILFE", "Core PCE (N√∫cleo)", "O indicador mais importante para a pol√≠tica monet√°ria. A meta do Fed √© de 2% para este n√∫cleo.", is_pct_change=True, unit="Var. Anual %")

    with subtab_us_real_estate:
        st.subheader("Indicadores do Mercado Imobili√°rio Americano")
        st.caption("O setor imobili√°rio √© um dos principais motores do ciclo econ√¥mico dos EUA.")
        st.divider()
        plot_indicator_with_analysis('fred', "MORTGAGE30US", "Taxa de Financiamento Imobili√°rio 30 Anos", "Mede o custo do cr√©dito para compra de im√≥veis.", unit="%")
        st.divider()
        plot_indicator_with_analysis('fred', "CSUSHPISA", "√çndice de Pre√ßos de Im√≥veis (Case-Shiller)", "Principal √≠ndice de pre√ßos de im√≥veis residenciais.", unit="√çndice")
        st.divider()
        plot_indicator_with_analysis('fred', "PERMIT", "Permiss√µes de Constru√ß√£o", "Indicador antecedente da atividade de constru√ß√£o.", unit="Milhares")

    with subtab_us_yield:
        # A implementa√ß√£o desta aba j√° estava correta, mas agora usar√° a fun√ß√£o que definimos.
        st.subheader("An√°lise da Curva de Juros Americana")
        st.caption("A forma e os spreads da curva de juros s√£o um dos principais indicadores antecedentes da atividade econ√¥mica.")
        st.divider()
        st.markdown("##### Forma da Curva de Juros Atual")
        yield_curve_df = get_us_yield_curve_data() # Agora esta fun√ß√£o existe
        if not yield_curve_df.empty:
            fig_curve = px.line(yield_curve_df, x='Prazo', y='Taxa (%)', title="Curva de Juros do Tesouro Americano", markers=True)
            st.plotly_chart(fig_curve, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel carregar os dados para a forma da curva de juros.")
        st.divider()
        st.markdown("##### Spreads da Curva de Juros (Indicadores de Recess√£o)")
        c1, c2 = st.columns(2)
        with c1:
            j10a = fetch_fred_series("DGS10", start_date); j2a = fetch_fred_series("DGS2", start_date)
            if not j10a.empty and not j2a.empty:
                spread = (j10a - j2a).dropna()
                fig = px.area(spread, title="Spread 10 Anos - 2 Anos"); fig.add_hline(y=0, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
        with c2:
            j2a_s = fetch_fred_series("DGS2", start_date); j3m = fetch_fred_series("DGS3MO", start_date)
            if not j2a_s.empty and not j3m.empty:
                spread = (j2a_s - j3m).dropna()
                fig = px.area(spread, title="Spread 2 Anos - 3 Meses"); fig.add_hline(y=0, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)

    with subtab_us_fed:
        # Esta se√ß√£o tamb√©m precisa usar a nova fun√ß√£o de plotagem para padroniza√ß√£o
        st.subheader("Painel de Pol√≠tica Monet√°ria - Federal Reserve (Fed)")
        st.caption("Acompanhe os indicadores, o balan√ßo e a comunica√ß√£o do banco central americano.")
        st.markdown("##### Indicadores Chave da Pol√≠tica Monet√°ria")
        c1, c2 = st.columns(2)
        with c1:
            plot_indicator_with_analysis('fred', "FEDFUNDS", "Fed Funds Rate", "A principal taxa de juros de pol√≠tica monet√°ria.", unit="%")
        with c2:
            # Dividindo por 1M para mostrar em trilh√µes
            balance_sheet = fetch_fred_series("WALCL", start_date) / 1000000
            plot_indicator_with_analysis(None, None, "Ativos Totais no Balan√ßo do Fed", "Aumentos (QE) indicam pol√≠tica expansionista; redu√ß√µes (QT) indicam contracionista.", unit="$ Trilh√µes")
            # ^ Note: A chamada acima foi ajustada para n√£o usar a fun√ß√£o unificada
            # devido √† transforma√ß√£o manual (divis√£o por 1M).
            # Uma abordagem mais limpa seria refatorar a plot_indicator_with_analysis
            # para aceitar uma s√©rie j√° transformada. Por agora, o c√≥digo original
            # para esta parte espec√≠fica pode ser mantido e ajustado se necess√°rio.
            # CORRE√á√ÉO MANUAL PARA ESTE GR√ÅFICO ESPEC√çFICO:
            if not balance_sheet.empty:
                 fig_bal = px.area(balance_sheet, title="Ativos Totais no Balan√ßo do Fed ($ Trilh√µes)")
                 st.plotly_chart(fig_bal, use_container_width=True)
            else:
                 st.warning("N√£o foi poss√≠vel carregar dados do balan√ßo do Fed.")

        # O restante da sua aba do FED est√° correto, apenas substitua a chamada
        # save_json_data por save_data
        # ... no seu c√≥digo, troque a linha:
        # save_json_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
        # por:
        # save_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
        st.divider()
        st.subheader("Acompanhamento Hist√≥rico do Discurso do FOMC")
        
        meetings = st.session_state.fomc_meetings
        if not meetings:
            st.info("Nenhum registro de reuni√£o do FOMC foi adicionado ainda.")
        else:
            sorted_meetings = sorted(meetings, key=lambda x: x['meeting_date'], reverse=True)
            meeting_dates = [m['meeting_date'] for m in sorted_meetings]
            selected_date = st.selectbox("Selecione a data da Reuni√£o do FOMC para analisar:", meeting_dates)
            
            selected_meeting = next((m for m in sorted_meetings if m['meeting_date'] == selected_date), None)
            
            if selected_meeting:
                st.metric("Decis√£o de Juros Tomada", selected_meeting.get("decision", "N/A"))
                h_score = selected_meeting["analysis"]["hawkish"]
                d_score = selected_meeting["analysis"]["dovish"]
                final_tone = "Hawkish ü¶Ö" if h_score > d_score else "Dovish üïäÔ∏è" if d_score > h_score else "Neutro üòê"
                
                c1, c2, c3 = st.columns(3)
                c1.metric("Placar Hawkish", h_score); c2.metric("Placar Dovish", d_score); c3.metric("Tom Predominante", final_tone)
                
                if selected_meeting.get("pdf_path") and os.path.exists(selected_meeting["pdf_path"]):
                    with open(selected_meeting["pdf_path"], "rb") as pdf_file:
                        st.download_button("Baixar Ata em PDF", data=pdf_file, file_name=os.path.basename(selected_meeting["pdf_path"]))
                
                with st.expander("Ver texto completo da ata"):
                    st.text(selected_meeting.get("minutes_text", "Texto n√£o dispon√≠vel."))

        # --- MODO EDITOR ---
        if st.session_state.get("role") == "Analista":
            st.divider()
            st.markdown("---")
            st.header("üìù Modo Editor - Reuni√µes do FOMC")
            
            editor_tab1, editor_tab2 = st.tabs(["Adicionar Nova Reuni√£o", "Gerenciar Reuni√µes Existentes"])
            
            with editor_tab1:
                with st.form("new_meeting_form"):
                    st.markdown("##### Adicionar Registro de Nova Reuni√£o")
                    m_date = st.date_input("Data da Reuni√£o"); m_decision = st.text_input("Decis√£o de Juros (ex: Manteve em 5.25%-5.50%)")
                    m_text = st.text_area("Cole aqui o texto completo da ata:", height=250); m_pdf = st.file_uploader("Anexar arquivo da ata em PDF")
                    
                    if st.form_submit_button("Salvar Nova Reuni√£o"):
                        if m_text and m_decision:
                            h, d = analyze_central_bank_discourse(m_text, lang='en')
                            new_meeting = {"meeting_date": m_date.strftime("%Y-%m-%d"), "decision": m_decision, "minutes_text": m_text, "pdf_path": "", "analysis": {"hawkish": h, "dovish": d}}
                            if m_pdf:
                                if not os.path.exists(REPORTS_DIR_FOMC): os.makedirs(REPORTS_DIR_FOMC)
                                file_path = os.path.join(REPORTS_DIR_FOMC, m_pdf.name)
                                with open(file_path, "wb") as f: f.write(m_pdf.getbuffer())
                                new_meeting["pdf_path"] = file_path
                            
                            st.session_state.fomc_meetings.append(new_meeting)
                            save_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
                            st.success("Nova reuni√£o salva com sucesso!"); st.rerun()
                        else:
                            st.error("Data, Decis√£o e Texto da Ata s√£o campos obrigat√≥rios.")

            with editor_tab2:
                st.markdown("##### Excluir um Registro de Reuni√£o")
                if not st.session_state.fomc_meetings:
                    st.info("Nenhuma reuni√£o para gerenciar.")
                else:
                    sorted_meetings_delete = sorted(st.session_state.fomc_meetings, key=lambda x: x['meeting_date'], reverse=True)
                    for i, meeting in enumerate(sorted_meetings_delete):
                        st.markdown(f"**Reuni√£o de {meeting['meeting_date']}**")
                        if st.button("Excluir este registro", key=f"delete_{meeting['meeting_date']}"):
                            st.session_state.fomc_meetings = [m for m in st.session_state.fomc_meetings if m['meeting_date'] != meeting['meeting_date']]
                            save_json_data(st.session_state.fomc_meetings, FOMC_MEETINGS_FILE)
                            st.success("Registro exclu√≠do!"); st.rerun()
                        st.divider()


# --- ABA MERCADOS GLOBAIS ---
with tab_global:
    st.header("√çndices e Indicadores de Mercado Global")
    subtab_equity, subtab_commodities, subtab_risk, subtab_valuation, subtab_big_players = st.tabs(["A√ß√µes", "Commodities", "Risco", "Valuation", "Vis√£o dos Big Players"])
    with subtab_equity:
        tickers = {"S&P 500": "^GSPC", "Ibovespa": "^BVSP", "Nasdaq": "^IXIC", "DAX": "^GDAXI"}
        sel = st.multiselect("Selecione os √≠ndices:", options=list(tickers.keys()), default=["S&P 500", "Ibovespa"])
        if sel:
            data = fetch_market_data([tickers[i] for i in sel])
            if not data.empty: st.plotly_chart(px.line((data / data.dropna().iloc[0]) * 100, title="Performance Normalizada (Base 100)"), use_container_width=True)
    with subtab_commodities:
        c1,c2 = st.columns(2)
        comm_tickers = {"Petr√≥leo WTI": "CL=F", "Ouro": "GC=F"}; data = fetch_market_data(list(comm_tickers.values()))
        if not data.empty: data.rename(columns=lambda c: next(k for k,v in comm_tickers.items() if v==c), inplace=True); c1.plotly_chart(px.line(data, title="Commodities"), use_container_width=True)
        curr_tickers = {"D√≥lar/Real": "BRL=X", "Euro/D√≥lar": "EURUSD=X"}; data=fetch_market_data(list(curr_tickers.values()))
        if not data.empty: data.rename(columns=lambda c: next(k for k,v in curr_tickers.items() if v==c), inplace=True); c2.plotly_chart(px.line(data, title="C√¢mbio"), use_container_width=True)
    with subtab_risk:
        vix = fetch_market_data(["^VIX"])
        if not vix.empty:
            fig = px.area(vix, title="√çndice de Volatilidade VIX"); fig.add_hline(y=20, line_dash="dash"); fig.add_hline(y=30, line_dash="dash", line_color="red"); st.plotly_chart(fig, use_container_width=True)
    with subtab_valuation:
        factor_tickers = {"Growth": "VUG", "Value": "VTV"}
        data = fetch_market_data(list(factor_tickers.values()))
        if not data.empty:
            data["Ratio"] = data["VUG"] / data["VTV"]
            st.plotly_chart(px.line(data["Ratio"], title="Ratio de Performance: Growth vs. Value"), use_container_width=True)
    with subtab_big_players:
        st.subheader("Vis√£o Consolidada dos Grandes Players")

        # --- VISUALIZA√á√ÉO P√öBLICA ---
        st.markdown("##### Matriz de Recomenda√ß√µes T√°ticas")
        if recommendations_df.empty:
            st.info("Nenhuma recomenda√ß√£o t√°tica adicionada.")
        else:
            latest_recs = recommendations_df.sort_values('Data', ascending=False).drop_duplicates(['Gestora', 'Classe de Ativo'])
            pivot_table = latest_recs.pivot_table(index='Classe de Ativo', columns='Gestora', values='Recomenda√ß√£o', aggfunc='first').fillna("-")
            st.dataframe(pivot_table.style.applymap(style_recommendation), use_container_width=True)
        
        st.divider()
        st.markdown("##### An√°lise Detalhada por Gestora")
        
        # Gestoras a serem exibidas
        managers_to_display = ["BlackRock", "JP Morgan", "XP", "BTG"]
        for manager in managers_to_display:
            with st.expander(f"Vis√£o da {manager}"):
                view_data = manager_views.get(manager, {"summary": "Dados n√£o dispon√≠veis.", "report_file": ""})
                st.markdown(view_data["summary"])
                if view_data.get("report_file") and os.path.exists(view_data["report_file"]):
                    with open(view_data["report_file"], "rb") as pdf_file:
                        st.download_button(label="Baixar Relat√≥rio Completo", data=pdf_file, file_name=os.path.basename(view_data["report_file"]), mime='application/octet-stream')
        
        st.divider()
        st.markdown("##### Consolida√ß√£o Highpar")
        st.info(manager_views.get("Highpar", {"summary": "Vis√£o da casa ainda n√£o definida."})["summary"])

        # --- MODO EDITOR ---
        if st.session_state.get("role") == "Analista":
            st.divider()
            st.markdown("---")
            st.header("üìù Modo Editor")

            # Editor da Matriz de Recomenda√ß√µes
            with st.form("matrix_editor_form"):
                st.markdown("##### Editar Matriz de Recomenda√ß√µes")
                c1,c2,c3 = st.columns(3)
                gestora = c1.selectbox("Gestora (Matriz)", managers_to_display)
                classe_ativo = c2.selectbox("Classe de Ativo (Matriz)", ["A√ß√µes Brasil", "A√ß√µes EUA", "Renda Fixa Pr√©", "Infla√ß√£o", "D√≥lar", "Commodities"])
                recomendacao = c3.radio("Recomenda√ß√£o", ["Overweight", "Neutral", "Underweight"], horizontal=True)
                if st.form_submit_button("Salvar na Matriz"):
                    new_rec = pd.DataFrame([{"Gestora": gestora, "Classe de Ativo": classe_ativo, "Recomenda√ß√£o": recomendacao, "Data": datetime.now().strftime("%Y-%m-%d")}])
                    updated_recs = pd.concat([recommendations_df, new_rec], ignore_index=True)
                    updated_recs.to_csv(RECOMMENDATIONS_FILE, index=False)
                    st.success("Matriz de recomenda√ß√µes atualizada!"); st.rerun()

            # Editor dos Detalhes das Gestoras
            with st.form("details_editor_form"):
                st.markdown("##### Editar An√°lise Detalhada da Gestora")
                manager_to_edit = st.selectbox("Selecione a Gestora para Editar", managers_to_display + ["Highpar"])
                
                current_summary = manager_views.get(manager_to_edit, {}).get("summary", "")
                new_summary = st.text_area("Texto da An√°lise", value=current_summary, height=250)
                
                uploaded_file = st.file_uploader("Subir novo relat√≥rio em PDF (opcional)")

                if st.form_submit_button("Salvar An√°lise Detalhada"):
                    if uploaded_file is not None:
                        # Cria o diret√≥rio se n√£o existir
                        if not os.path.exists(REPORTS_DIR):
                            os.makedirs(REPORTS_DIR)
                        # Salva o arquivo e guarda o caminho
                        file_path = os.path.join(REPORTS_DIR, uploaded_file.name)
                        with open(file_path, "wb") as f:
                            f.write(uploaded_file.getbuffer())
                        manager_views[manager_to_edit]["report_file"] = file_path
                    
                    manager_views[manager_to_edit]["summary"] = new_summary
                    manager_views[manager_to_edit]["last_updated"] = datetime.now().strftime("%Y-%m-%d")

                    with open(MANAGER_VIEWS_FILE, 'w', encoding='utf-8') as f:
                        json.dump(manager_views, f, ensure_ascii=False, indent=4)
                    
                    st.success(f"An√°lise da {manager_to_edit} atualizada!"); st.rerun()
