# pages/6_üí∞_An√°lise_de_Renda_Fixa.py

import streamlit as st
import pandas as pd
from fredapi import Fred
import plotly.express as px
from datetime import datetime, timedelta

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="An√°lise de Renda Fixa", page_icon="üí∞", layout="wide")

# --- INICIALIZA√á√ÉO DA API DO FRED ---
@st.cache_resource
def get_fred_api():
    """Inicializa a conex√£o com a API do FRED."""
    try:
        api_key = st.secrets.get("FRED_API_KEY")
        if not api_key:
            st.error("Chave da API do FRED (FRED_API_KEY) n√£o encontrada nos segredos do Streamlit.")
            st.stop()
        return Fred(api_key=api_key)
    except Exception as e:
        st.error(f"Falha ao inicializar a API do FRED: {e}")
        st.stop()

fred = get_fred_api()

# --- FUN√á√ïES DE BUSCA DE DADOS COM CACHE ---
@st.cache_data(ttl=3600) # Cache de 1 hora
def get_yield_curve_data():
    """Busca os dados mais recentes para montar a curva de juros dos EUA."""
    maturities_codes = {
        '1 M√™s': 'DGS1MO', '3 Meses': 'DGS3MO', '6 Meses': 'DGS6MO', 
        '1 Ano': 'DGS1', '2 Anos': 'DGS2', '3 Anos': 'DGS3', 
        '5 Anos': 'DGS5', '7 Anos': 'DGS7', '10 Anos': 'DGS10', 
        '20 Anos': 'DGS20', '30 Anos': 'DGS30'
    }
    yield_data = []
    for name, code in maturities_codes.items():
        try:
            # Pega o √∫ltimo valor dispon√≠vel para cada maturidade
            latest_value = fred.get_series_latest_release(code)
            if not latest_value.empty:
                yield_data.append({'Prazo': name, 'Taxa (%)': latest_value.iloc[0]})
        except:
            continue # Pula se houver erro para um ticker espec√≠fico
    
    # Ordena os prazos para o gr√°fico ficar correto
    maturities_order = list(maturities_codes.keys())
    df = pd.DataFrame(yield_data)
    df['Prazo'] = pd.Categorical(df['Prazo'], categories=maturities_order, ordered=True)
    return df.sort_values('Prazo')

@st.cache_data(ttl=3600)
def get_fred_series(series_codes, start_date):
    """Busca s√©ries hist√≥ricas do FRED."""
    df = pd.DataFrame()
    for name, code in series_codes.items():
        try:
            series = fred.get_series(code, start_date)
            df[name] = series
        except:
            continue
    return df.dropna()


# --- INTERFACE DA APLICA√á√ÉO ---
st.title("üí∞ Painel de An√°lise de Renda Fixa")
st.markdown("Um cockpit para monitorar as condi√ß√µes do mercado de juros, cr√©dito e infla√ß√£o.")

# --- Datas para a an√°lise hist√≥rica ---
start_date = datetime.now() - timedelta(days=5*365) # 5 anos de hist√≥rico

# --- 1. Curva de Juros (Yield Curve) ---
st.subheader("Curva de Juros (US Treasury Yield Curve)")
yield_curve_df = get_yield_curve_data()

if yield_curve_df.empty:
    st.warning("N√£o foi poss√≠vel obter os dados da curva de juros no momento.")
else:
    latest_date = fred.get_series_info('DGS10').loc['last_updated'].split(' ')[0]
    st.caption(f"Curva de juros do Tesouro Americano para a data mais recente dispon√≠vel ({latest_date}).")
    
    fig_yield_curve = px.line(yield_curve_df, x='Prazo', y='Taxa (%)', title="Forma da Curva de Juros Atual", markers=True)
    fig_yield_curve.update_layout(xaxis_title="Vencimento do T√≠tulo", yaxis_title="Taxa de Juros Anual (%)")
    st.plotly_chart(fig_yield_curve, use_container_width=True)
st.divider()


# --- 2. Spreads de Cr√©dito ---
st.subheader("Monitor de Spreads de Cr√©dito")
st.caption("O spread de cr√©dito √© o pr√™mio de risco exigido pelo mercado para investir em t√≠tulos corporativos em vez de t√≠tulos do governo. Spreads maiores indicam maior avers√£o ao risco.")

credit_spread_codes = {
    "Spread High Yield (Risco Alto)": "BAMLH0A0HYM2",
    "Spread Investment Grade (Risco Baixo/M√©dio)": "BAMLC0A4CBBB"
}
spreads_df = get_fred_series(credit_spread_codes, start_date)

if spreads_df.empty:
    st.warning("N√£o foi poss√≠vel obter os dados de spread de cr√©dito.")
else:
    fig_spreads = px.line(spreads_df, title="Evolu√ß√£o dos Spreads de Cr√©dito (EUA)")
    fig_spreads.update_layout(yaxis_title="Spread sobre o Tesouro (%)", xaxis_title="Data", legend_title="Tipo de T√≠tulo")
    st.plotly_chart(fig_spreads, use_container_width=True)
st.divider()


# --- 3. Expectativa de Infla√ß√£o ---
st.subheader("Expectativa de Infla√ß√£o (Breakeven)")
st.caption("Medida pela diferen√ßa entre os juros dos t√≠tulos nominais e os t√≠tulos protegidos contra a infla√ß√£o (TIPS). Indica a infla√ß√£o m√©dia anual que o mercado espera para os pr√≥ximos anos.")

inflation_codes = {
    "Expectativa de Infla√ß√£o (10 Anos)": "T10YIE",
    "Expectativa de Infla√ß√£o (5 Anos)": "T5YIE"
}
inflation_df = get_fred_series(inflation_codes, start_date)

if inflation_df.empty:
    st.warning("N√£o foi poss√≠vel obter os dados de expectativa de infla√ß√£o.")
else:
    fig_inflation = px.line(inflation_df, title="Infla√ß√£o Impl√≠cita no Mercado de T√≠tulos (EUA)")
    fig_inflation.update_layout(yaxis_title="Infla√ß√£o Anual Esperada (%)", xaxis_title="Data", legend_title="Horizonte")
    st.plotly_chart(fig_inflation, use_container_width=True)
