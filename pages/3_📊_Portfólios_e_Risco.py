# pages/3_游늵_Portf칩lios_e_Risco.py (Vers칚o Final e Robusta)

import streamlit as st
import pandas as pd
import yfinance as yf
import plotly.express as px
import numpy as np

# --- Configura칞칚o da P치gina ---
st.set_page_config(
    page_title="PAG | An치lise de Portf칩lios",
    page_icon="游늵",
    layout="wide"
)

# --- T칤tulo e Descri칞칚o ---
st.title("An치lise de Carteira com Pesos Iguais")
st.markdown("Analise o risco e o retorno de uma carteira diversificada com aloca칞칚o igual entre os ativos.")

# --- Barra Lateral com Inputs ---
st.sidebar.header("Montagem da Carteira")
tickers_string = st.sidebar.text_area(
    "Insira os Tickers separados por v칤rgula",
    "AAPL, GOOG, MSFT, NVDA, JPM, V, PFE, JNJ, MGLU3.SA, PETR4.SA",
    help="Use os c칩digos do Yahoo Finance. Ex: PETR4.SA para Petrobras."
)
run_button = st.sidebar.button("Analisar Carteira")

# --- Fun칞칫es Auxiliares ---
@st.cache_data
def get_price_data(tickers_list):
    """Baixa os dados de pre칞os de fechamento ajustados."""
    # ALTERA칂츾O 1: Removido o par칙metro 'end' para tornar a chamada mais robusta.
    try:
        data = yf.download(tickers_list, start="2020-01-01")['Adj Close']
        return data.dropna(axis=1, how='all')
    except Exception:
        return pd.DataFrame()

def calculate_portfolio_metrics(prices, weights):
    """Calcula as m칠tricas de um portf칩lio com base nos pesos."""
    returns = prices.pct_change().dropna()
    portfolio_return = np.sum(returns.mean() * weights) * 252
    cov_matrix = returns.cov() * 252
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    sharpe_ratio = portfolio_return / portfolio_volatility
    z_score = 1.645 # Z-score para 95% de confian칞a
    daily_var = portfolio_volatility / np.sqrt(252) * z_score
    return portfolio_return, portfolio_volatility, sharpe_ratio, daily_var

# --- L칩gica Principal ---
if run_button:
    tickers = [ticker.strip().upper() for ticker in tickers_string.split(",")]
    if not tickers or tickers == ['']:
        st.warning("Por favor, insira pelo menos um ticker.")
    else:
        # ALTERA칂츾O 2: Melhoria no bloco try-except para mostrar o erro detalhado.
        try:
            with st.spinner("Buscando dados e analisando a carteira..."):
                prices = get_price_data(tickers)
                
                if prices.empty:
                    st.error("N칚o foi poss칤vel obter dados para os tickers fornecidos. Verifique os c칩digos e o per칤odo.")
                else:
                    num_assets = len(prices.columns)
                    weights = np.full(num_assets, 1/num_assets)
                    p_return, p_vol, p_sharpe, p_var = calculate_portfolio_metrics(prices, weights)

                    st.header("An치lise da Carteira (Pesos Iguais)")
                    
                    col1, col2, col3, col4 = st.columns(4)
                    col1.metric("Retorno Anual Estimado", f"{p_return*100:.2f}%")
                    col2.metric("Volatilidade Anual", f"{p_vol*100:.2f}%")
                    col3.metric("칈ndice de Sharpe", f"{p_sharpe:.2f}")
                    col4.metric("VaR (95%, 1 dia)", f"{p_var*100:.2f}%", help="Com 95% de confian칞a, a perda m치xima em 1 dia n칚o deve exceder este percentual.")

                    weights_df = pd.DataFrame({'Ativo': prices.columns, 'Peso': weights})
                    fig = px.pie(weights_df, names='Ativo', values='Peso', title='Aloca칞칚o de Ativos (Pesos Iguais)')
                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.subheader("Performance Hist칩rica da Carteira")
                    returns = prices.pct_change().dropna()
                    portfolio_cumulative_returns = (1 + (returns * weights).sum(axis=1)).cumprod() - 1
                    
                    fig_perf = px.line(portfolio_cumulative_returns, title="Retorno Acumulado da Carteira")
                    fig_perf.update_layout(yaxis_title="Retorno Acumulado", xaxis_title="Data", showlegend=False)
                    st.plotly_chart(fig_perf, use_container_width=True)

        except Exception as e:
            st.error(f"Ocorreu um erro inesperado durante a an치lise: {e}")
            st.info("Dica: Alguns tickers podem n칚o ter dados dispon칤veis ou o formato pode ser inv치lido.")

else:
    st.info("Insira os tickers dos ativos na barra lateral para analisar a carteira.")
