# app.py

import streamlit as st
import pandas as pd
import pandas_datareader.data as web
import plotly.express as px
from datetime import datetime

# --- Configura칞칚o da P치gina ---
# A fun칞칚o set_page_config deve ser a primeira chamada do Streamlit no script.
st.set_page_config(
    page_title="PAG | An치lise Macro",
    page_icon="游늳",
    layout="wide"
)

# --- Dicion치rio de S칠ries do FRED ---
# Organiza os c칩digos dos indicadores para f치cil acesso.
fred_series = {
    'Taxa de Juros': {
        'EUA': 'FEDFUNDS',
        'Brasil': 'BCBPCUM'  # Selic (BCB)
    },
    'Infla칞칚o (YoY)': {
        'EUA': 'CPIAUCSL',
        'Brasil': 'FPCPITOTLZGBRA'
    },
    'PIB (Cresc. Anual %)': {
        'EUA': 'A191RL1Q225SBEA',
        'Brasil': 'RGDPNABRINA666NRUG'
    },
    'Taxa de Desemprego': {
        'EUA': 'UNRATE',
        'Brasil': 'LRUNTTTTBRQ156S'
    }
}

# --- Cache de Dados ---
# O decorator @st.cache_data garante que os dados sejam baixados apenas uma vez,
# mesmo que o usu치rio interaja com a p치gina. Isso torna o app muito mais r치pido.
@st.cache_data
def fetch_fred_data(series_codes, start_date, end_date):
    """
    Busca dados de m칰ltiplas s칠ries do FRED e os combina em um 칰nico DataFrame.
    """
    try:
        df = web.DataReader(series_codes.values(), 'fred', start_date, end_date)
        # Renomeia as colunas para os nomes dos pa칤ses para clareza
        df = df.rename(columns=dict(zip(series_codes.values(), series_codes.keys())))
        return df
    except Exception as e:
        st.error(f"Erro ao buscar dados: {e}")
        return pd.DataFrame()

# --- Interface do Usu치rio (UI) ---

# T칤tulo da Aplica칞칚o
st.title("Painel de An치lise Macroecon칪mica")
st.markdown("Plataforma para an치lise comparativa de indicadores econ칪micos do Brasil e EUA.")

# Sidebar para filtros e controles
st.sidebar.header("Filtros")

# Sele칞칚o do Indicador
selected_indicator = st.sidebar.selectbox(
    'Selecione o Indicador Econ칪mico',
    options=list(fred_series.keys())
)

# Sele칞칚o do Per칤odo
start_date = st.sidebar.date_input(
    'Data de In칤cio',
    value=pd.to_datetime('2010-01-01'),
    min_value=pd.to_datetime('1990-01-01'),
    max_value=datetime.today()
)

end_date = st.sidebar.date_input(
    'Data de Fim',
    value=datetime.today(),
    min_value=pd.to_datetime('1990-01-01'),
    max_value=datetime.today()
)


# --- L칩gica de Neg칩cio e Exibi칞칚o de Dados ---

# Busca os c칩digos correspondentes ao indicador selecionado
series_to_fetch = fred_series[selected_indicator]

# Informa ao usu치rio o que est치 sendo carregado
with st.spinner(f'Carregando dados de "{selected_indicator}"...'):
    # Busca os dados usando a fun칞칚o com cache
    data_df = fetch_fred_data(series_to_fetch, start_date, end_date)

# Verifica se os dados foram carregados com sucesso
if not data_df.empty:
    st.header(f"An치lise de: {selected_indicator}")
    
    # Preenche valores ausentes para garantir continuidade no gr치fico
    # O m칠todo 'ffill' (forward fill) preenche um valor NaN com o 칰ltimo valor v치lido.
    data_df_filled = data_df.ffill()

    # Cria o gr치fico interativo com Plotly Express
    fig = px.line(
        data_df_filled,
        x=data_df_filled.index,
        y=data_df_filled.columns,
        title=f'Comparativo de {selected_indicator}: Brasil vs. EUA',
        labels={'value': 'Valor', 'DATE': 'Data', 'variable': 'Pa칤s'}
    )
    # Exibe o gr치fico no Streamlit
    st.plotly_chart(fig, use_container_width=True)

    # Exibe a tabela de dados brutos
    st.subheader("Dados em Tabela")
    # Mostra os 칰ltimos 10 registros, com formata칞칚o para 2 casas decimais
    st.dataframe(data_df.sort_index(ascending=False).head(10).style.format("{:.2f}"))
else:
    st.warning("N칚o foi poss칤vel carregar os dados para o per칤odo ou indicador selecionado.")

st.sidebar.markdown("---")
st.sidebar.info("Desenvolvido por Global Platform.")
